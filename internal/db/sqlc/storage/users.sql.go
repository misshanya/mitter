// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package storage

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (login, name, password) VALUES ($1, $2, $3)
RETURNING id
`

type CreateUserParams struct {
	Login          string
	Name           string
	Hashedpassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Login, arg.Name, arg.Hashedpassword)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getCurrentPasswordHash = `-- name: GetCurrentPasswordHash :one
SELECT password FROM users WHERE id = $1
`

func (q *Queries) GetCurrentPasswordHash(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRow(ctx, getCurrentPasswordHash, id)
	var password string
	err := row.Scan(&password)
	return password, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, login, name, password FROM users WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Name,
		&i.Password,
	)
	return i, err
}

const getUserByLogin = `-- name: GetUserByLogin :one
SELECT id, login, name, password FROM users WHERE login = $1
LIMIT 1
`

func (q *Queries) GetUserByLogin(ctx context.Context, login string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByLogin, login)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Name,
		&i.Password,
	)
	return i, err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE users
SET
    password = $1
WHERE id = $2
`

type UpdatePasswordParams struct {
	Password string
	ID       uuid.UUID
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.Exec(ctx, updatePassword, arg.Password, arg.ID)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET
    name = COALESCE($1, name)
WHERE id = $2
`

type UpdateUserParams struct {
	Name pgtype.Text
	ID   uuid.UUID
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser, arg.Name, arg.ID)
	return err
}
