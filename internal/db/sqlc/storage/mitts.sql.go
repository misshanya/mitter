// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: mitts.sql

package storage

import (
	"context"

	"github.com/google/uuid"
)

const createMitt = `-- name: CreateMitt :one
INSERT INTO mitts (
    author, content
) VALUES (
    $1, $2
)
RETURNING id, author, content, created_at, updated_at
`

type CreateMittParams struct {
	Author  uuid.UUID
	Content string
}

func (q *Queries) CreateMitt(ctx context.Context, arg CreateMittParams) (Mitt, error) {
	row := q.db.QueryRow(ctx, createMitt, arg.Author, arg.Content)
	var i Mitt
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMitt = `-- name: DeleteMitt :exec
DELETE FROM mitts
WHERE id = $1
`

func (q *Queries) DeleteMitt(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteMitt, id)
	return err
}

const getAllUserMitts = `-- name: GetAllUserMitts :many
SELECT id, author, content, created_at, updated_at FROM mitts
WHERE author = $1
`

func (q *Queries) GetAllUserMitts(ctx context.Context, author uuid.UUID) ([]Mitt, error) {
	rows, err := q.db.Query(ctx, getAllUserMitts, author)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Mitt
	for rows.Next() {
		var i Mitt
		if err := rows.Scan(
			&i.ID,
			&i.Author,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMitt = `-- name: GetMitt :one
SELECT id, author, content, created_at, updated_at FROM mitts
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetMitt(ctx context.Context, id uuid.UUID) (Mitt, error) {
	row := q.db.QueryRow(ctx, getMitt, id)
	var i Mitt
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateMitt = `-- name: UpdateMitt :one
UPDATE mitts
SET
    content = $1,
    updated_at = NOW()
WHERE id = $2
RETURNING id, author, content, created_at, updated_at
`

type UpdateMittParams struct {
	Content string
	ID      uuid.UUID
}

func (q *Queries) UpdateMitt(ctx context.Context, arg UpdateMittParams) (Mitt, error) {
	row := q.db.QueryRow(ctx, updateMitt, arg.Content, arg.ID)
	var i Mitt
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
