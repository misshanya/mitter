// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: mitts.sql

package storage

import (
	"context"

	"github.com/google/uuid"
)

const createMitt = `-- name: CreateMitt :one
INSERT INTO mitts (
    author, content
) VALUES (
    $1, $2
)
RETURNING id, author, content, created_at, updated_at
`

type CreateMittParams struct {
	Author  uuid.UUID
	Content string
}

func (q *Queries) CreateMitt(ctx context.Context, arg CreateMittParams) (Mitt, error) {
	row := q.db.QueryRow(ctx, createMitt, arg.Author, arg.Content)
	var i Mitt
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMitt = `-- name: DeleteMitt :exec
DELETE FROM mitts
WHERE id = $1
`

func (q *Queries) DeleteMitt(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteMitt, id)
	return err
}

const deleteMittLike = `-- name: DeleteMittLike :exec
DELETE FROM mitts_likes
WHERE user_id = $1 AND mitt_id = $2
`

type DeleteMittLikeParams struct {
	UserID uuid.UUID
	MittID uuid.UUID
}

func (q *Queries) DeleteMittLike(ctx context.Context, arg DeleteMittLikeParams) error {
	_, err := q.db.Exec(ctx, deleteMittLike, arg.UserID, arg.MittID)
	return err
}

const feed = `-- name: Feed :many
SELECT id, author, content, created_at, updated_at FROM mitts
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type FeedParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) Feed(ctx context.Context, arg FeedParams) ([]Mitt, error) {
	rows, err := q.db.Query(ctx, feed, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Mitt
	for rows.Next() {
		var i Mitt
		if err := rows.Scan(
			&i.ID,
			&i.Author,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUserMitts = `-- name: GetAllUserMitts :many
SELECT id, author, content, created_at, updated_at FROM mitts
WHERE author = $3
ORDER BY created_at
LIMIT $1 OFFSET $2
`

type GetAllUserMittsParams struct {
	Limit  int32
	Offset int32
	Author uuid.UUID
}

func (q *Queries) GetAllUserMitts(ctx context.Context, arg GetAllUserMittsParams) ([]Mitt, error) {
	rows, err := q.db.Query(ctx, getAllUserMitts, arg.Limit, arg.Offset, arg.Author)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Mitt
	for rows.Next() {
		var i Mitt
		if err := rows.Scan(
			&i.ID,
			&i.Author,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMitt = `-- name: GetMitt :one
SELECT id, author, content, created_at, updated_at FROM mitts
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetMitt(ctx context.Context, id uuid.UUID) (Mitt, error) {
	row := q.db.QueryRow(ctx, getMitt, id)
	var i Mitt
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMittLikesCount = `-- name: GetMittLikesCount :one
SELECT COUNT(*) FROM mitts_likes
WHERE mitt_id = $1
`

func (q *Queries) GetMittLikesCount(ctx context.Context, mittID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getMittLikesCount, mittID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const isMittLikedByUser = `-- name: IsMittLikedByUser :one
SELECT 1 FROM mitts_likes
WHERE user_id = $1 AND mitt_id = $2
`

type IsMittLikedByUserParams struct {
	UserID uuid.UUID
	MittID uuid.UUID
}

func (q *Queries) IsMittLikedByUser(ctx context.Context, arg IsMittLikedByUserParams) (int32, error) {
	row := q.db.QueryRow(ctx, isMittLikedByUser, arg.UserID, arg.MittID)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const likeMitt = `-- name: LikeMitt :exec
INSERT INTO mitts_likes (
    user_id, mitt_id
) VALUES (
    $1, $2
)
`

type LikeMittParams struct {
	UserID uuid.UUID
	MittID uuid.UUID
}

func (q *Queries) LikeMitt(ctx context.Context, arg LikeMittParams) error {
	_, err := q.db.Exec(ctx, likeMitt, arg.UserID, arg.MittID)
	return err
}

const updateMitt = `-- name: UpdateMitt :one
UPDATE mitts
SET
    content = $1,
    updated_at = NOW()
WHERE id = $2
RETURNING id, author, content, created_at, updated_at
`

type UpdateMittParams struct {
	Content string
	ID      uuid.UUID
}

func (q *Queries) UpdateMitt(ctx context.Context, arg UpdateMittParams) (Mitt, error) {
	row := q.db.QueryRow(ctx, updateMitt, arg.Content, arg.ID)
	var i Mitt
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
