basePath: /api/v1
definitions:
  dto.ChangePasswordRequest:
    properties:
      new_password:
        maxLength: 100
        minLength: 8
        type: string
      old_password:
        maxLength: 100
        minLength: 8
        type: string
    required:
    - new_password
    - old_password
    type: object
  dto.HTTPError:
    properties:
      message:
        type: string
    type: object
  dto.MittCreateRequest:
    properties:
      content:
        type: string
    type: object
  dto.MittResponse:
    properties:
      author:
        type: string
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      updated_at:
        type: string
    type: object
  dto.MittUpdateRequest:
    properties:
      content:
        type: string
    type: object
  dto.SignInRequest:
    properties:
      login:
        maxLength: 50
        minLength: 2
        type: string
      password:
        maxLength: 100
        minLength: 8
        type: string
    required:
    - login
    - password
    type: object
  dto.SignInResponse:
    properties:
      token:
        type: string
    type: object
  dto.SignUpRequest:
    properties:
      login:
        maxLength: 50
        minLength: 2
        type: string
      name:
        maxLength: 50
        minLength: 2
        type: string
      password:
        maxLength: 100
        minLength: 8
        type: string
    required:
    - login
    - name
    - password
    type: object
  dto.SignUpResponse:
    properties:
      id:
        type: string
    type: object
  dto.UserResponse:
    properties:
      id:
        type: string
      login:
        type: string
      name:
        type: string
    type: object
  dto.UserUpdateRequest:
    properties:
      name:
        maxLength: 50
        minLength: 2
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  title: Mitter
  version: "1.0"
paths:
  /auth/change-password:
    post:
      consumes:
      - application/json
      description: Change user's password
      parameters:
      - description: access token 'Bearer {token}'
        in: header
        name: Authorization
        required: true
        type: string
      - description: Change Password Request
        in: body
        name: ChangePasswordRequest
        required: true
        schema:
          $ref: '#/definitions/dto.ChangePasswordRequest'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.HTTPError'
      security:
      - Bearer: []
      summary: Change Password
      tags:
      - Auth
  /auth/sign-in:
    post:
      consumes:
      - application/json
      description: Sign In user via login and password
      parameters:
      - description: Sign In Request
        in: body
        name: SignInRequest
        required: true
        schema:
          $ref: '#/definitions/dto.SignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SignInResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.HTTPError'
      summary: Sign In
      tags:
      - Auth
  /auth/sign-up:
    post:
      consumes:
      - application/json
      description: Sign Up user
      parameters:
      - description: Sign Up Request
        in: body
        name: SignUpRequest
        required: true
        schema:
          $ref: '#/definitions/dto.SignUpRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.SignUpResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.HTTPError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.HTTPError'
      summary: Sign Up
      tags:
      - Auth
  /mitt:
    post:
      consumes:
      - application/json
      parameters:
      - description: access token 'Bearer {token}'
        in: header
        name: Authorization
        required: true
        type: string
      - description: Create Mitt Request
        in: body
        name: CreateMittRequest
        required: true
        schema:
          $ref: '#/definitions/dto.MittCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.MittResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.HTTPError'
      security:
      - Bearer: []
      summary: Create Mitt
      tags:
      - Mitts
  /mitt/{id}:
    delete:
      parameters:
      - description: access token 'Bearer {token}'
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID of mitt
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.HTTPError'
      security:
      - Bearer: []
      summary: Delete mitt
      tags:
      - Mitts
    get:
      parameters:
      - description: ID of mitt
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MittResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.HTTPError'
      summary: Get Mitt
      tags:
      - Mitts
    put:
      consumes:
      - application/json
      parameters:
      - description: access token 'Bearer {token}'
        in: header
        name: Authorization
        required: true
        type: string
      - description: ID of mitt
        in: path
        name: id
        required: true
        type: string
      - description: Update Mitt Request
        in: body
        name: UpdateMittRequest
        required: true
        schema:
          $ref: '#/definitions/dto.MittUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MittResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.HTTPError'
      security:
      - Bearer: []
      summary: Update Mitt
      tags:
      - Mitts
  /mitt/user/{id}:
    get:
      parameters:
      - description: ID of user
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.MittResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.HTTPError'
      summary: Get User Mitts
      tags:
      - Mitts
  /user:
    delete:
      description: Delete user account
      parameters:
      - description: access token 'Bearer {token}'
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.HTTPError'
      security:
      - Bearer: []
      summary: Delete account
      tags:
      - User
    get:
      description: Get info about me
      parameters:
      - description: access token 'Bearer {token}'
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.HTTPError'
      security:
      - Bearer: []
      summary: Get Me
      tags:
      - User
    patch:
      consumes:
      - application/json
      description: Update user info
      parameters:
      - description: access token 'Bearer {token}'
        in: header
        name: Authorization
        required: true
        type: string
      - description: Update User Request
        in: body
        name: UpdateUserRequest
        required: true
        schema:
          $ref: '#/definitions/dto.UserUpdateRequest'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.HTTPError'
      security:
      - Bearer: []
      summary: Update user
      tags:
      - User
swagger: "2.0"
